class Conta:
    def __init__(self, numero):
        self.__numero = numero
        self.__saldo = 0

    def creditar(self, valor):
        self.__saldo += valor

    def debitar(self, valor):
        if valor <= self.__saldo:
            self.__saldo -= valor
        else:
            print("Saldo insuficiente para debitar!")

    def get_numero(self):
        return self.__numero

    def get_saldo(self):
        return self.__saldo


class ContaPoupanca(Conta):
    def __init__(self, numero):
        super().__init__(numero)

    def render_juros(self, taxa):
        self.creditar(self.get_saldo() * taxa)


class BancoLista:
    def __init__(self, taxa_juros=0.01):
        self.contas = []
        self.taxa_juros = taxa_juros

    def cadastrar(self, conta):
        self.contas.append(conta)

    def procurar_conta(self, numero):
        for conta in self.contas:
            if conta.get_numero() == numero:
                return conta
        return None

    def render_juros(self, numero):
        conta = self.procurar_conta(numero)
        if isinstance(conta, ContaPoupanca):
            conta.render_juros(self.taxa_juros)
        else:
            print("Conta não é uma poupança ou não existe!")


class Banco:
    def __init__(self, taxa_juros=0.01):
        self.contas = {}
        self.taxa_juros = taxa_juros

    def cadastrar(self, conta):
        self.contas[conta.get_numero()] = conta

    def procurar_conta(self, numero):
        return self.contas.get(numero, None)

    def render_juros(self, numero):
        conta = self.procurar_conta(numero)
        if isinstance(conta, ContaPoupanca):
            conta.render_juros(self.taxa_juros)
        else:
            print("Conta não é uma poupança ou não existe!")


# Programa principal para testar as classes
if __name__ == '__main__':
    banco_lista = BancoLista(taxa_juros=0.02)
    banco = Banco(taxa_juros=0.03)

    # Criando contas poupança
    conta_poupanca1 = ContaPoupanca('11.111-1')
    conta_poupanca2 = ContaPoupanca('22.222-2')

    # Cadastrando contas em BancoLista e Banco
    banco_lista.cadastrar(conta_poupanca1)
    banco.cadastrar(conta_poupanca2)

    # Creditando valores nas contas
    conta_poupanca1.creditar(1000)
    conta_poupanca2.creditar(1500)

    # Render juros em BancoLista
    banco_lista.render_juros('11.111-1')
    print(f"Saldo da conta poupança 11.111-1 após render juros: R$ {conta_poupanca1.get_saldo():.2f}")

    # Render juros em Banco
    banco.render_juros('22.222-2')
    print(f"Saldo da conta poupança 22.222-2 após render juros: R$ {conta_poupanca2.get_saldo():.2f}")
